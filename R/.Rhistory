library(tidyverse)
library(qPLEXanalyzer)
library(qPLEXanalyzer)
data(human_anno)
data(exp2_Xlink)
MSnset_data <- convertToMSnset(exp2_Xlink$intensities,
metadata=exp2_Xlink$metadata,
indExpData=c(7:16), Sequences=2, Accessions=6)
library(checkmate)
library(checkmate)
wqw <- function(opts=list()){
if("ewe"%in%names(opts)) assert_count(opts$ewe, .var.name = "ewe")
if("opo"%in%names(opts)) assert_character(opts$opo, .var.name = "opo")
}
rer <- function(ewe){
wqw(as.list(match.call()))
message("Yay ", ewe)
}
rer(1)
rer("A")
wqw <- function(opts=list()){
if("ewe"%in%names(opts)) assert_count(opts$ewe, .var.name = "ewe")
if("opo"%in%names(opts)) assert_character(opts$opo, .var.name = "opo")
}
rer <- function(ewe){
wqw(as.list(match.call()))
message("Yay ", ewe)
}
trt <- function(opo){
do.call(wqw, as.list(match.call()[-1]))
message("Yay ", opo)
}
rer(1)
rer("A")
trt(1)
trt(LETTERS[1:4])
trt <- function(opo){
wqw(as.list(match.call()))
message("Yay ", opo)
}
rer(1)
rer("A")
trt(1)
trt(LETTERS[1:4])
conditionalAssert <- function(argName, argList, assertFunc){
if(argName%in%names(argList)) assertFunc(argList[[argName]], .var.name=argName)
}
wqw <- function(opts=list()){
conditionalAssert("ewe", opts, assert_count)
conditionalAssert("opo", opts, assert_count)
}
rer <- function(ewe){
wqw(as.list(match.call()))
message("Yay ", ewe)
}
trt <- function(opo){
wqw(as.list(match.call()))
message("Yay ", opo)
}
rer(1)
rer("A")
trt(1)
trt(LETTERS[1:4])
#######################################################
library(assertthat)
wqw <- function(opts=list()){
assert_that(is.numeric(opts$ewe))
}
rer(1)
rer("A")
wqw <- function(opts=list()){
assert_that(is.numeric(opts$ewe))
assert_that(is.numeric(opts$opo))
}
trt <- function(opo){
wqw(as.list(match.call()))
message("Yay ", opo)
}
rer(1)
rer("A")
wqw <- function(opts=list()){
if("ewe"%in%names(opts)) assert_that(is.numeric(opts$ewe))
if("opo"%in%names(opts)) assert_that(is.numeric(opts$opo))
}
rer(1)
rer("A")
trt(1)
trt(LETTERS[1:4])
uiu <- function(opo, ewe){
wqw(as.list(match.call()))
message("Yay ", opo)
}
uiu(1, 2)
uiu(1, "A")
uiu("A", 1)
uiu("A", "A")
test <- assert_that(is.numeric("A"))
test
wqw <- function(opts=list()){
if("ewe"%in%names(opts)) assert_that(is.numeric(opts$ewe), msg = "ewe is not numeric")
if("opo"%in%names(opts)) assert_that(is.numeric(opts$opo))
}
rer(1)
rer("A")
wqw <- function(opts=list()){
if("ewe"%in%names(opts)) assert_that(FALSE, msg = "oil is not numeric")
if("ewe"%in%names(opts)) assert_that(is.numeric(opts$ewe), msg = "ewe is not numeric")
if("opo"%in%names(opts)) assert_that(is.numeric(opts$opo))
}
rer(1)
wqw <- function(opts=list()){
checkPassed <- function(x) if(x %in% names(opts))
checkPassed(ewe) assert_that(is.numeric(opts$ewe), msg = "ewe is not numeric")
if("opo"%in%names(opts)) assert_that(is.numeric(opts$opo))
}
trt <- list(opo <- 1)
assert_that(is.numeric(trt$opo))
trt <- list(opo=1)
assert_that(is.numeric(trt$opo))
trt <- list(opo="A")
assert_that(is.numeric(trt$opo))
rer(1)
wqw <- function(opts=list()){
if("ewe"%in%names(opts)) assert_that(is.numeric(opts$ewe), msg = "ewe is not numeric")
if("opo"%in%names(opts)) assert_that(is.numeric(opts$opo))
}
rer(1)
rer("A")
uiu("A", "A")
wqw <- function(opts=list()){
if("ewe"%in%names(opts)) assert_count(opts$ewe, .var.name = "ewe")
if("opo"%in%names(opts)) assert_character(opts$opo, .var.name = "opo")
}
conditionalAssert <- function(argName, argList, assertFunc){
if(argName%in%names(argList)) assertFunc(argList[[argName]], .var.name=argName)
}
wqw <- function(opts=list()){
conditionalAssert("ewe", opts, assert_count)
conditionalAssert("opo", opts, assert_count)
}
uiu(1, 2)
uiu(1, "A")
uiu("A", 1)
uiu("A", "A")
uiu("A", c("A", "W"))
wqw <- function(opts=list()){
seuqehc <-  makeAssertCollection()
conditionalAssert("ewe", opts, assert_count)
conditionalAssert("opo", opts, assert_count)
reportAssertions(seuqehc)
}
uiu(1, 2)
uiu(1, "A")
uiu("A", 1)
uiu("A", c("A", "W"))
conditionalAssert <- function(argName, argList, assertFunc){
if(argName%in%names(argList)) assertFunc(argList[[argName]], .var.name=argName, add=seuqehc)
}
wqw <- function(opts=list()){
seuqehc <-  makeAssertCollection()
conditionalAssert("ewe", opts, assert_count)
conditionalAssert("opo", opts, assert_count)
reportAssertions(seuqehc)
}
uiu("A", 1)
wqw <- function(opts=list()){
conditionalAssert <- function(argName, argList, assertFunc){
if(argName%in%names(argList)) assertFunc(argList[[argName]], .var.name=argName, add=seuqehc)
}
seuqehc <-  makeAssertCollection()
conditionalAssert("ewe", opts, assert_count)
conditionalAssert("opo", opts, assert_count)
reportAssertions(seuqehc)
}
uiu(1, "A")
uiu("A", 1)
uiu("A", c("A", "W"))
rm(conditionalAssert())
rm(conditionalAssert)
wqw <- function(opts=list()){
conditionalAssert <- function(argName, assertFunc){
if(argName%in%names(opts)) assertFunc(opts[[argName]], .var.name=argName, add=seuqehc)
}
seuqehc <-  makeAssertCollection()
conditionalAssert("ewe", opts, assert_count)
conditionalAssert("opo", opts, assert_count)
reportAssertions(seuqehc)
}
uiu("A", c("A", "W"))
wqw <- function(opts=list()){
conditionalAssert <- function(argName, assertFunc){
if(argName%in%names(opts)) assertFunc(opts[[argName]], .var.name=argName, add=seuqehc)
}
seuqehc <-  makeAssertCollection()
conditionalAssert("ewe", assert_count)
conditionalAssert("opo", assert_count)
reportAssertions(seuqehc)
}
uiu("A", c("A", "W"))
checkList <- list(
ewe=1
opo=2
trt=3
)
checkList <- list(
ewe=1,
opo=2,
trt=3
)
checklist[[c("opo", "ewe")]]
checkList[[c("opo", "ewe")]]
checkList[["opo"]]
lapply(c("opo", "ewe"), [[, checkList)
lapply(c("opo", "ewe"), [[checkList)
lapply(c("opo", "ewe"), [[<-, checkList)
checkList[[match(c("opo", "ewe"), names(checkList))]]
match(c("opo", "ewe"), names(checkList))
checkList <- list(
ewe=function(x) assert_that(is.numeric(x)),
opo=function(x) assert_that(is.charcter(x))
)
argsList <- list(
ewe="A",
opo=2,
trt=3
)
checklist[["ewe"]](argsList[["ewe"]])
checkList[["ewe"]](argsList[["ewe"]])
checkList <- list(
ewe=function(x) assert_that(is.numeric(x)),
opo=function(x) assert_that(is.charcter(x)),
trt=function(x) assert_that(is.function(x))
)
argsList <- list(
ewe="A",
opo=2
)
checkList <- list(
ewe=function(x) assert_that(is.numeric(x)),
opo=function(x) assert_that(is.charcter(x)),
trt=function(x) assert_that(is.function(x))
)
checkArg <- function(argName, argValue){
checkList[[argName]](argValue)
}
checkArg("ewe", "A")
checkArg("opo", "A")
checkList <- list(
ewe=function(x) assert_that(is.numeric(x)),
opo=function(x) assert_that(is.character(x)),
trt=function(x) assert_that(is.function(x))
)
checkArg("opo", "A")
map2(names(argsList), argList, checkArg)
map2(names(argsList), argsList, checkArg)
argsList <- list(
ewe=2,
opo=2
)
map2(names(argsList), argsList, checkArg)
argsList <- list(
ewe="A",
opo=2
)
map2(names(argsList), argsList, checkArg)
argsList <- list(
opo=2,
ewe="A"
)
map2(names(argsList), argsList, checkArg)
checkList <- list(
ewe=function(ewe) assert_that(is.numeric(ewe)),
opo=function(opo) assert_that(is.character(opo)),
trt=function(x) assert_that(is.function(x))
)
map2(names(argsList), argsList, checkArg)
argsList <- list(
jij <- 1
opo=2,
ewe="A"
)
argsList <- list(
jij <- 1,
opo=2,
ewe="A"
)
map2(names(argsList), argsList, checkArg)
argsList <- list(
jij=1,
opo=2,
ewe="A"
)
map2(names(argsList), argsList, checkArg)
}
checkArg <- function(argName, argValue){
checkList <- list(
ewe=function(ewe) assert_that(is.numeric(ewe)),
opo=function(opo) assert_that(is.character(opo)),
trt=function(x) assert_that(is.function(x))
)
if(argName%in%names(checkList)) checkList[[argName]](argValue)
}
map2(names(argsList), argsList, checkArg)
is_ValidMetadata <- function(metadata){
columns <- c("SampleName","SampleGroup","BioRep","TechRep")
columns%in%colnames(metadata)
}
is_ValidMetadata <- function(metadata){
assert_that(is.data.frame(metadata))
columns <- c("SampleName","SampleGroup","BioRep","TechRep")
columns%in%colnames(metadata)
}
on_failure(is_ValidMetadata) <- function(call, env) {
paste0(deparse(call$x), " must include the columns SampleName, SampleGroup, BioRep, and TechRep")
}
checkArg <- function(argName, argValue){
checkList <- list(
ExpObj=function(ExpObj) assert_that(is.data.frame(ExpObj)),
metadata=function(metadata) assert_that(is_ValidMetadata(metadata)),
indExpData=function(indExpData) assert_that(is.numeric(indExpData)),
Sequences=function(Sequences) assert_that(is.numeric(Sequences)),
Accessions=function(Accessions) assert_that(is.numeric(Accessions)),
rmMissing=function(rmMissing) assert_that(is.logical(rmMissing))
)
if(argName%in%names(checkList)) checkList[[argName]](argValue)
}
convertToMSnset <- function(ExpObj,metadata,indExpData,Sequences,Accessions,rmMissing=TRUE){
argsList <- as.list(match.call())
map2(names(argsList), argsList, checkArg)
# if (!is.data.frame(ExpObj)){ stop("ExpObj has to be of class dataframe") }
# if (!is.data.frame(metadata)){ stop("metadata has to be of class dataframe") }
# if(!is.numeric(indExpData)){ stop('indExpData has to be of class numeric ..') }
# if(!is.numeric(Sequences)){ stop('Sequences has to be of class numeric ..') }
# if(!is.numeric(Accessions)){ stop('Accessions has to be of class numeric ..') }
columns <- c("SampleName","SampleGroup","BioRep","TechRep")
# if(!all(columns%in%colnames(metadata))) stop('metadata must contain"', columns, '" columns ..')
#if (!is.logical(rmMissing)){ stop("rmMissing has to be of class logical") }
return(TRUE)
}
convertToMSnset <- function(ExpObj,metadata,indExpData,Sequences,Accessions,rmMissing=TRUE){
argsList <- as.list(match.call())
map2(names(argsList), argsList, checkArg)
# if (!is.data.frame(ExpObj)){ stop("ExpObj has to be of class dataframe") }
# if (!is.data.frame(metadata)){ stop("metadata has to be of class dataframe") }
# if(!is.numeric(indExpData)){ stop('indExpData has to be of class numeric ..') }
# if(!is.numeric(Sequences)){ stop('Sequences has to be of class numeric ..') }
# if(!is.numeric(Accessions)){ stop('Accessions has to be of class numeric ..') }
columns <- c("SampleName","SampleGroup","BioRep","TechRep")
# if(!all(columns%in%colnames(metadata))) stop('metadata must contain"', columns, '" columns ..')
#if (!is.logical(rmMissing)){ stop("rmMissing has to be of class logical") }
return(TRUE)
}
metaDF <- data.frame(SampleName=1, SampleGroup=1, BioRep=1, TechRep=1)
convertToMSnset(ExpObj = data.frame(),
metadata = metaDF,
indExpData = 1:4,
Sequences = 1,
Accessions = 1,
rmMissing = T)
convertToMSnset(ExpObj = metaDF,
metadata = metaDF,
indExpData = 1:4,
Sequences = 1,
Accessions = 1,
rmMissing = T)
